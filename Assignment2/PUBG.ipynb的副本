{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "reading\n",
      "done\n"
     ]
    }
   ],
   "source": [
    "import csv\n",
    "    \n",
    "file = open('train_V2.csv','r')\n",
    "reader = csv.reader(file)\n",
    "\n",
    "print(\"reading\")\n",
    "data = []\n",
    "for row in reader:\n",
    "    if row[0] != 'Id':\n",
    "        data.append(row)\n",
    "print(\"done\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1, 0.0, 0.0, 60.0, 0.0, 0.0, 0.0, 0.0, 0.0, 244.8, 1.0], [1, 91.47, 0.0, 57.0, 0.0, 0.0045, 0.0, 11.04, 0.0, 1434.0, 5.0], [1, 68.0, 0.0, 47.0, 0.0, 0.0, 0.0, 0.0, 0.0, 161.8, 2.0], [1, 32.9, 0.0, 75.0, 0.0, 0.0, 0.0, 0.0, 0.0, 202.7, 3.0], [1, 100.0, 0.0, 45.0, 1.0, 0.0, 0.0, 0.0, 0.0, 49.75, 2.0], [1, 100.0, 1.0, 44.0, 1.0, 0.0, 0.0, 0.0, 0.0, 34.7, 1.0], [1, 0.0, 0.0, 96.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.5, 1.0], [1, 8.538, 0.0, 48.0, 0.0, 2004.0, 0.0, 0.0, 0.0, 1089.0, 6.0], [1, 51.6, 0.0, 64.0, 0.0, 0.0, 0.0, 0.0, 0.0, 799.9, 4.0], [1, 37.27, 0.0, 74.0, 0.0, 0.0, 0.0, 0.0, 0.0, 65.67, 1.0]] 4446965\n",
      "[0.4444, 0.64, 0.7755, 0.1667, 0.1875, 0.037, 0.0, 0.7368, 0.3704, 0.2143] 4446965\n"
     ]
    }
   ],
   "source": [
    "\n",
    "import numpy as np\n",
    "\n",
    "def featurex(datum):\n",
    "    feat = [1]\n",
    "    mark = 0\n",
    "    for data in datum:\n",
    "        if data == '':\n",
    "            mark = 1\n",
    "            break\n",
    "    if mark == 0:\n",
    "        feat += [float(datum[5]),float(datum[7]),float(datum[9]),float(datum[12]),float(datum[20]),float(datum[21]),float(datum[22]),float(datum[24]),float(datum[25]),float(datum[26])]\n",
    "        return feat\n",
    "    '''\n",
    "    try:\n",
    "        mark = float(datum[-1])\n",
    "        #feat += [datum[5],int(datum[7]),datum[9],datum[12],datum[20],datum[21],datum[22],datum[24],datum[25],datum[26]]\n",
    "        feat += [float(datum[5]),float(datum[7]),float(datum[9]),float(datum[12]),float(datum[20]),float(datum[21]),float(datum[22]),float(datum[24]),float(datum[25]),float(datum[26])]\n",
    "        return feat\n",
    "    except:\n",
    "        print(datum[-1])\n",
    "    '''\n",
    "    \n",
    "def featurey(datum):\n",
    "    '''\n",
    "    try:\n",
    "        return float(datum[-1])\n",
    "    except:\n",
    "        print(datum[-1])\n",
    "    '''\n",
    "    mark = 0\n",
    "    for data in datum:\n",
    "        if not data:\n",
    "            mark = 1\n",
    "            break\n",
    "    if mark == 0:\n",
    "        return float(datum[-1])\n",
    "    \n",
    "    \n",
    "'''\n",
    "def feature(datum):\n",
    "    try:\n",
    "        return float(datum[-1])\n",
    "    except:\n",
    "        print(datum)\n",
    "'''\n",
    "    \n",
    "X = [featurex(d) for d in data if featurex(d) != None]\n",
    "print(X[0:10],len(X))\n",
    "y = [featurey(d) for d in data if featurey(d) != None]\n",
    "print(y[0:10],len(y))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 7.27879100e-01  3.42002723e-05 -2.03126857e-03 -7.51935592e-03\n",
      " -1.54787694e-01  1.00516414e-05  1.86225639e-02  1.54246197e-04\n",
      " -2.09711943e-03  1.20226201e-04  1.02159902e-02]\n"
     ]
    }
   ],
   "source": [
    "\n",
    "try:\n",
    "    theta,residuals,rank,s = np.linalg.lstsq(np.array(X[:4000000],dtype='float'), np.array(y[:4000000],dtype='float'), rcond = -1)\n",
    "    print(theta)\n",
    "except ValueError:\n",
    "    pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {},
   "outputs": [],
   "source": [
    "testing_data = data[4000000::]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Theta:\n",
      "[ 7.27879100e-01  3.42002723e-05 -2.03126857e-03 -7.51935592e-03\n",
      " -1.54787694e-01  1.00516414e-05  1.86225639e-02  1.54246197e-04\n",
      " -2.09711943e-03  1.20226201e-04  1.02159902e-02]\n",
      "MSE of Testing data:\n",
      "0.01908028675480508\n"
     ]
    }
   ],
   "source": [
    "def meanSquaredError(theta,X,y):\n",
    "    result = []\n",
    "    for i in range(len(X)):\n",
    "        sumup = 0\n",
    "        for j in range(len(theta)):\n",
    "            sumup += theta[j]*X[i][j]\n",
    "        result.append(sumup)\n",
    "    train_err = 0\n",
    "    for i in range(len(y)):\n",
    "        try:\n",
    "            train_err += (result[i]-y[i])**2\n",
    "        except TypeError:\n",
    "            print(result[i].type,y[i].type)\n",
    "    return train_err / len(y)\n",
    "\n",
    "#training_data = data[0:3000000]\n",
    "\n",
    "#X_train = [featurex(d) for d in training_data]\n",
    "X_test = [featurex(d) for d in testing_data]\n",
    "\n",
    "#y_train = [featurey(d) for d in training_data]\n",
    "y_test = [featurey(d) for d in testing_data]\n",
    "\n",
    "#theta,residuals,rank,s = np.linalg.lstsq(X_train, y_train, rcond = -1)\n",
    "print(\"Theta:\")\n",
    "print(theta)\n",
    "\n",
    "#print(\"MSE of Training data:\")\n",
    "#print(meanSquaredError(theta, X_train, y_train))\n",
    "\n",
    "print(\"MSE of Testing data:\")\n",
    "print(meanSquaredError(theta, X_test, y_test))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "begin\n",
      "1934174 1934174\n",
      "done\n"
     ]
    }
   ],
   "source": [
    "filetest = open('test_V2.csv','r')\n",
    "predict = open('prediction.csv','w')\n",
    "readertest = csv.reader(filetest)\n",
    "writer = csv.writer(predict)\n",
    "\n",
    "def prediction(theta,X):\n",
    "    result = []\n",
    "    for i in range(len(X)):\n",
    "        y = 0\n",
    "        for j in range(len(theta)):\n",
    "            y += theta[j]*X[i][j]\n",
    "        if y>1:\n",
    "            y = 1\n",
    "        if y<0:\n",
    "            y = 0\n",
    "        result.append(y)\n",
    "    return result\n",
    "    \n",
    "print(\"begin\")\n",
    "X_predict = []\n",
    "X_Id = []\n",
    "for datum in readertest:\n",
    "    if datum[0] != 'Id':\n",
    "        mark = 0\n",
    "        for data in datum:\n",
    "            if data == '':\n",
    "                mark = 1\n",
    "                break\n",
    "        if mark == 0:\n",
    "            factor = [1,float(datum[5]),float(datum[7]),float(datum[9]),float(datum[12]),float(datum[20]),float(datum[21]),float(datum[22]),float(datum[24]),float(datum[25]),float(datum[26])]\n",
    "            X_predict.append(factor)\n",
    "            X_Id.append(datum[0])\n",
    "    \n",
    "y_predict = prediction(theta,X_predict)\n",
    "    \n",
    "print(len(y_predict),len(X_Id))\n",
    "print(\"done\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {},
   "outputs": [],
   "source": [
    "writer.writerow(['Id','winPlacePerc'])\n",
    "for i in range(len(X_Id)):\n",
    "    writer.writerow([X_Id[i],y_predict[i]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
